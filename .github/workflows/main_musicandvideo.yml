# This workflow builds a Java project with Gradle located in a subdirectory,
# skips tests, prepares the specific executable JAR, and deploys it to Azure Web App.

name: Build and Deploy Gradle Subdirectory Project to Azure Web App

on:
  push:
    branches:
      - main # Or your deployment branch
  workflow_dispatch:

jobs:
  build:
    runs-on: ubuntu-latest
    permissions:
      contents: read # Required for actions/checkout

    steps:
      - uses: actions/checkout@v4

      - name: Set up Java version
        uses: actions/setup-java@v4
        with:
          java-version: '21' # Ensure this matches your project's requirement
          distribution: 'microsoft'

      # Grant execute permission for gradlew inside the subdirectory
      - name: Make gradlew executable
        run: chmod +x ./gradlew
        working-directory: ./Mobile_API # Specify the subdirectory

      # Build with Gradle, skipping the test task
      - name: Build with Gradle (skipping tests)
        run: ./gradlew build -x test
        working-directory: ./Mobile_API # Specify the subdirectory

      # Find the executable JAR, rename it, and prepare for upload
      - name: Prepare artifact for deployment
        id: prep_artifact
        run: |
          ARTIFACT_DIR="Mobile_API/build/libs"
          APP_NAME="Mobile_API" # Should match spring.application.name or your artifact base name
          TARGET_JAR="app.jar" # The predictable name for the artifact

          echo "Searching for JAR in $ARTIFACT_DIR"
          cd $ARTIFACT_DIR

          # Find the main executable JAR (assumes it doesn't end with -plain.jar or -sources.jar)
          # Adjust the pattern if your naming convention is different
          EXECUTABLE_JAR=$(find . -maxdepth 1 -name "${APP_NAME}-*.jar" ! -name "*-plain.jar" ! -name "*-sources.jar")

          # Check if exactly one JAR was found
          if [ $(echo "$EXECUTABLE_JAR" | wc -l) -ne 1 ]; then
            echo "Error: Could not find a unique executable JAR matching '${APP_NAME}-*.jar' (excluding -plain and -sources)."
            echo "Found:"
            ls -1 *.jar # List all JARs to help debug
            exit 1
          fi

          # Remove leading ./ if present
          EXECUTABLE_JAR=$(basename "$EXECUTABLE_JAR")

          echo "Found executable JAR: $EXECUTABLE_JAR"
          # Copy the executable JAR to the root workspace with the target name
          cp "$EXECUTABLE_JAR" "${{ github.workspace }}/$TARGET_JAR"
          echo "Copied $EXECUTABLE_JAR to ${{ github.workspace }}/$TARGET_JAR"

      - name: Upload artifact for deployment job
        uses: actions/upload-artifact@v4
        with:
          name: java-app # Artifact name
          # Upload only the renamed JAR from the workspace root
          path: '${{ github.workspace }}/app.jar'

  deploy:
    runs-on: ubuntu-latest
    needs: build # Depends on the build job completing successfully
    environment:
      name: 'Production' # Name of the GitHub environment (optional, but good practice)
      url: ${{ steps.deploy-to-webapp.outputs.webapp-url }} # URL of the deployed app
    permissions:
      id-token: write # Required for OIDC login to Azure

    steps:
      - name: Download artifact from build job
        uses: actions/download-artifact@v4
        with:
          name: java-app # Must match the artifact name in the build job
          # Artifact will be downloaded to the root of the workspace

      - name: Verify downloaded artifact
        run: ls -l

      - name: Login to Azure
        uses: azure/login@v2
        with:
          client-id: ${{ secrets.MOBILESPRINGAPI_AZURE_CLIENT_ID }}
          tenant-id: ${{ secrets.MOBILESPRINGAPI_AZURE_TENANT_ID }}
          subscription-id: ${{ secrets.MOBILESPRINGAPI_AZURE_SUBSCRIPTION_ID }}

      - name: Deploy to Azure Web App
        id: deploy-to-webapp
        uses: azure/webapps-deploy@v3
        with:
          app-name: 'musicAndVideo' # Name of your Azure Web App
          slot-name: 'Production' # Deployment slot name
          # Deploy the specific, predictably named JAR from the artifact
          package: 'app.jar'

      # Optional: logout step
      # - name: logout from Azure
      #   run: |
      #     az logout
      #     az account clear
